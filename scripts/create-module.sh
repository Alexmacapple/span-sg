#!/bin/bash
set -e

# Script de cr√©ation module SPAN
# Automatise S3-01: Cr√©ation modules vides + front-matter
# Usage: ./scripts/create-module.sh <SERVICE> [REFERENT] [DATE]

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo "üìÑ SPAN SG - Script cr√©ation module"
echo "===================================="
echo ""

# Param√®tres
SERVICE="${1}"
REFERENT="${2:-√Ä d√©finir}"
DATE="${3:-$(date +%Y-%m-%d)}"

if [ -z "$SERVICE" ]; then
    echo -e "${RED}‚ùå Usage: ./scripts/create-module.sh <SERVICE> [REFERENT] [DATE]${NC}"
    echo ""
    echo "Exemples:"
    echo "  ./scripts/create-module.sh SNUM"
    echo "  ./scripts/create-module.sh SIRCOM \"Jean Dupont\" \"2025-09-30\""
    echo ""
    echo "Services SPAN SG v1:"
    echo "  - SNUM  : Service du Num√©rique"
    echo "  - SIRCOM: Service Interminist√©riel des Ressources et Comp√©tences"
    echo "  - SRH   : Service des Ressources Humaines"
    echo "  - SIEP  : Service de l'Innovation et de l'√âvaluation"
    echo "  - SAFI  : Service des Affaires Financi√®res et Immobili√®res"
    echo "  - BGS   : Bureau de Gestion des Services"
    exit 1
fi

# Normaliser service (uppercase)
SERVICE=$(echo "$SERVICE" | tr '[:lower:]' '[:upper:]')
SERVICE_LOWER=$(echo "$SERVICE" | tr '[:upper:]' '[:lower:]')

# Nom complet service (pour header)
case $SERVICE in
    SNUM)
        SERVICE_FULL="Service du Num√©rique"
        ;;
    SIRCOM)
        SERVICE_FULL="Service Interminist√©riel des Ressources et des Comp√©tences"
        ;;
    SRH)
        SERVICE_FULL="Service des Ressources Humaines"
        ;;
    SIEP)
        SERVICE_FULL="Service de l'Innovation et de l'√âvaluation des Politiques"
        ;;
    SAFI)
        SERVICE_FULL="Service des Affaires Financi√®res et Immobili√®res"
        ;;
    BGS)
        SERVICE_FULL="Bureau de Gestion des Services"
        ;;
    *)
        echo -e "${YELLOW}‚ö†Ô∏è  Service '$SERVICE' non reconnu (hors p√©rim√®tre v1)${NC}"
        read -p "Nom complet du service: " SERVICE_FULL
        ;;
esac

echo "Configuration:"
echo "  - Service     : $SERVICE ($SERVICE_FULL)"
echo "  - R√©f√©rent    : $REFERENT"
echo "  - Date        : $DATE"
echo ""

# V√©rifier template existe
TEMPLATE_PATH="docs/modules/_template.md"
if [ ! -f "$TEMPLATE_PATH" ]; then
    echo -e "${RED}‚ùå Template non trouv√©: $TEMPLATE_PATH${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Template trouv√©${NC}"

# V√©rifier module n'existe pas d√©j√†
MODULE_PATH="docs/modules/${SERVICE_LOWER}.md"
if [ -f "$MODULE_PATH" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Module existe d√©j√†: $MODULE_PATH${NC}"
    read -p "√âcraser ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Annulation."
        exit 0
    fi
    rm "$MODULE_PATH"
fi

# Copier template
echo ""
echo "üìã Cr√©ation module depuis template..."
cp "$TEMPLATE_PATH" "$MODULE_PATH"
echo -e "${GREEN}‚úÖ Module cr√©√©: $MODULE_PATH${NC}"

# Remplacer placeholders
echo "üîß Personnalisation front-matter..."

# Remplacer dans le fichier
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS (BSD sed)
    sed -i '' "s/service: \[SERVICE\]/service: $SERVICE/" "$MODULE_PATH"
    sed -i '' "s/referent: \"\[Pr√©nom Nom\]\"/referent: \"[$REFERENT - $SERVICE_FULL]\"/" "$MODULE_PATH"
    sed -i '' "s/updated: \"2025-09-30\"/updated: \"$DATE\"/" "$MODULE_PATH"

    # Header
    sed -i '' "s/# SPAN \[SERVICE\]/# SPAN $SERVICE/" "$MODULE_PATH"
    sed -i '' "s/\*\*Service\*\* \[Nom complet\]/\*\*Service\*\* $SERVICE_FULL ($SERVICE)/" "$MODULE_PATH"
    sed -i '' "s/\*\*Derni√®re mise √† jour\*\* 30 septembre 2025/**Derni√®re mise √† jour** $(date -j -f "%Y-%m-%d" "$DATE" +"%d %B %Y" 2>/dev/null || echo "$DATE")/" "$MODULE_PATH"
else
    # Linux (GNU sed)
    sed -i "s/service: \[SERVICE\]/service: $SERVICE/" "$MODULE_PATH"
    sed -i "s/referent: \"\[Pr√©nom Nom\]\"/referent: \"[$REFERENT - $SERVICE_FULL]\"/" "$MODULE_PATH"
    sed -i "s/updated: \"2025-09-30\"/updated: \"$DATE\"/" "$MODULE_PATH"

    # Header
    sed -i "s/# SPAN \[SERVICE\]/# SPAN $SERVICE/" "$MODULE_PATH"
    sed -i "s/\*\*Service\*\* \[Nom complet\]/\*\*Service\*\* $SERVICE_FULL ($SERVICE)/" "$MODULE_PATH"
    sed -i "s/\*\*Derni√®re mise √† jour\*\* 30 septembre 2025/**Derni√®re mise √† jour** $(date -d "$DATE" +"%d %B %Y" 2>/dev/null || echo "$DATE")/" "$MODULE_PATH"
fi

echo -e "${GREEN}‚úÖ Front-matter personnalis√©${NC}"

# Validation structure
echo ""
echo "üîç Validation structure..."

# Compter points DINUM
DINUM_COUNT=$(grep -c "<!-- DINUM -->" "$MODULE_PATH" || echo "0")
if [ "$DINUM_COUNT" -eq 31 ]; then
    echo -e "${GREEN}‚úÖ 31 points DINUM pr√©sents${NC}"
else
    echo -e "${RED}‚ùå ERREUR: $DINUM_COUNT points DINUM (attendu 31)${NC}"
    exit 1
fi

# V√©rifier aucune case coch√©e
CHECKED_COUNT=$(grep -c "\[x\].*<!-- DINUM -->" "$MODULE_PATH" || echo "0")
if [ "$CHECKED_COUNT" -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Toutes cases vides (0/31)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  $CHECKED_COUNT cases coch√©es (attendu 0 pour module vide)${NC}"
fi

# V√©rifier sections obligatoires
SECTIONS_COUNT=$(grep -c "^## [1-5]\." "$MODULE_PATH" || echo "0")
if [ "$SECTIONS_COUNT" -ge 5 ]; then
    echo -e "${GREEN}‚úÖ 5 sections obligatoires pr√©sentes${NC}"
else
    echo -e "${RED}‚ùå ERREUR: Seulement $SECTIONS_COUNT sections (attendu 5)${NC}"
fi

# Test scoring
echo ""
echo "üßÆ Test scoring..."
if python scripts/calculate_scores.py > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Script scoring OK${NC}"

    # Afficher score module
    SCORE_LINE=$(python scripts/calculate_scores.py 2>/dev/null | grep -i "$SERVICE" || echo "")
    if [ -n "$SCORE_LINE" ]; then
        echo "   Score: $SCORE_LINE"
    fi
else
    echo -e "${RED}‚ùå Erreur scoring - v√©rifier docs/synthese.md${NC}"
fi

# R√©sum√©
echo ""
echo "=========================================="
echo -e "${GREEN}‚úÖ Module $SERVICE cr√©√© avec succ√®s !${NC}"
echo ""
echo "Fichier:"
echo "  üìÑ $MODULE_PATH"
echo ""
echo "Validation:"
echo "  ‚úÖ Structure: 31 points DINUM, 5 sections"
echo "  ‚úÖ Front-matter: service, referent, updated"
echo "  ‚úÖ Score: 0/31 (module vide)"
echo ""
echo "Prochaines √©tapes:"
echo "  1. Ouvrir: code $MODULE_PATH"
echo "  2. Remplir sections 1-5 avec contenu r√©el (S3-03)"
echo "  3. Cocher points DINUM conformes"
echo "  4. Cr√©er PR: git checkout -b feature/create-$SERVICE_LOWER"
echo "            git add $MODULE_PATH docs/synthese.md"
echo "            git commit -m \"feat($SERVICE_LOWER): cr√©e module vide avec front-matter\""
echo "            git push -u origin feature/create-$SERVICE_LOWER"
echo "=========================================="
