#!/bin/bash
set -e

# Script d'initialisation repository SPAN SG
# Automatise S1-01: Cr√©ation du d√©p√¥t GitHub priv√©
# Usage: ./scripts/init-repo.sh [repo-name] [github-org-or-user]

# Couleurs pour output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "üì¶ SPAN SG - Script d'initialisation repository"
echo "=============================================="
echo ""

# Param√®tres
REPO_NAME="${1:-span-sg-repo}"
GITHUB_OWNER="${2:-Alexmacapple}"

echo "Configuration:"
echo "  - Repository : ${REPO_NAME}"
echo "  - Owner      : ${GITHUB_OWNER}"
echo ""

# V√©rifications pr√©requis
echo "üîç V√©rification pr√©requis..."

# Git install√©
if ! command -v git &> /dev/null; then
    echo -e "${RED}‚ùå Git n'est pas install√©${NC}"
    echo "Installer avec: brew install git (macOS) ou apt install git (Linux)"
    exit 1
fi
echo -e "${GREEN}‚úÖ Git $(git --version)${NC}"

# GitHub CLI (optionnel mais recommand√©)
if ! command -v gh &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  GitHub CLI (gh) non install√© - cr√©ation repo manuelle n√©cessaire${NC}"
    GH_AVAILABLE=false
else
    echo -e "${GREEN}‚úÖ GitHub CLI $(gh --version | head -1)${NC}"
    GH_AVAILABLE=true
fi

# Working directory propre
if [ -d ".git" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Repository Git d√©j√† initialis√©${NC}"
    read -p "R√©initialiser ? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf .git
        echo -e "${GREEN}‚úÖ .git supprim√©${NC}"
    else
        echo "Annulation."
        exit 0
    fi
fi

echo ""
echo "üöÄ Initialisation Git local..."

# Init Git
git init
echo -e "${GREEN}‚úÖ Repository Git initialis√©${NC}"

# Config user (si pas d√©j√† configur√© globalement)
if [ -z "$(git config user.name)" ]; then
    read -p "Nom utilisateur Git: " git_name
    git config user.name "$git_name"
fi
if [ -z "$(git config user.email)" ]; then
    read -p "Email utilisateur Git: " git_email
    git config user.email "$git_email"
fi
echo -e "${GREEN}‚úÖ Git config: $(git config user.name) <$(git config user.email)>${NC}"

# Branche principale
git branch -M main
echo -e "${GREEN}‚úÖ Branche main cr√©√©e${NC}"

# Premier commit
echo ""
echo "üìù Cr√©ation commit initial..."
git add .
git commit -m "chore: import repo v3.3 GO-ready + enrichissements + agents + prompts

- Skeleton projet SPAN SG complet
- MkDocs Material configur√©
- Scripts scoring automatique
- CI/CD GitHub Actions
- Documentation contributeur
- Roadmap BMAD 17 stories

ü§ñ Generated with [Claude Code](https://claude.com/claude-code)
"
echo -e "${GREEN}‚úÖ Commit initial cr√©√©${NC}"

# Cr√©ation repo GitHub
echo ""
if [ "$GH_AVAILABLE" = true ]; then
    echo "üåê Cr√©ation repository GitHub..."

    # V√©rifier auth gh
    if ! gh auth status &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  Non authentifi√© sur GitHub CLI${NC}"
        echo "Lancer: gh auth login"
        exit 1
    fi

    # Cr√©er repo (priv√© par d√©faut)
    if gh repo create "${GITHUB_OWNER}/${REPO_NAME}" --private --source=. --remote=origin --description "SPAN SG - Sch√©ma Pluriannuel d'Accessibilit√© Num√©rique du Secr√©tariat G√©n√©ral"; then
        echo -e "${GREEN}‚úÖ Repository ${GITHUB_OWNER}/${REPO_NAME} cr√©√© (priv√©)${NC}"
    else
        echo -e "${RED}‚ùå √âchec cr√©ation repository${NC}"
        echo "Erreurs possibles:"
        echo "  - Repository existe d√©j√† : https://github.com/${GITHUB_OWNER}/${REPO_NAME}"
        echo "  - Permissions insuffisantes"
        echo "  - Quota organisation atteint"
        exit 1
    fi

    # Push
    echo ""
    echo "‚¨ÜÔ∏è  Push vers GitHub..."
    if git push -u origin main; then
        echo -e "${GREEN}‚úÖ Code push√© sur origin/main${NC}"
    else
        echo -e "${RED}‚ùå √âchec push${NC}"
        echo "Message erreur typique:"
        echo "  fatal: remote origin already exists ‚Üí git remote remove origin"
        echo "  fatal: Authentication failed ‚Üí gh auth refresh"
        exit 1
    fi

else
    # Cr√©ation manuelle
    echo "üìã √âtapes manuelles (GitHub CLI non disponible):"
    echo ""
    echo "1. Cr√©er repository sur GitHub:"
    echo "   https://github.com/new"
    echo "   - Name: ${REPO_NAME}"
    echo "   - Visibility: Private"
    echo "   - Ne pas initialiser (README, .gitignore, license)"
    echo ""
    echo "2. Ajouter remote et push:"
    echo "   git remote add origin https://github.com/${GITHUB_OWNER}/${REPO_NAME}.git"
    echo "   git push -u origin main"
    echo ""
    exit 0
fi

# Cr√©er branche draft
echo ""
echo "üåø Cr√©ation branche draft..."
git checkout -b draft
if git push -u origin draft; then
    echo -e "${GREEN}‚úÖ Branche draft cr√©√©e et push√©e${NC}"
else
    echo -e "${RED}‚ùå √âchec push draft${NC}"
    exit 1
fi

# Protection branche main (optionnel)
echo ""
read -p "Configurer protection branche main ? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "üîí Configuration protection branche..."
    echo "√âtapes manuelles (API GitHub limit√©e):"
    echo "1. Aller sur: https://github.com/${GITHUB_OWNER}/${REPO_NAME}/settings/branches"
    echo "2. Add branch protection rule"
    echo "3. Branch name pattern: main"
    echo "4. Cocher: Require pull request before merging"
    echo "5. Cocher: Require approvals (1)"
fi

# R√©sum√©
echo ""
echo "=========================================="
echo -e "${GREEN}‚úÖ Initialisation termin√©e !${NC}"
echo ""
echo "Repository cr√©√©:"
echo "  üìÅ Local  : $(pwd)"
echo "  üåê Remote : https://github.com/${GITHUB_OWNER}/${REPO_NAME}"
echo "  üåø Branches: main (protection), draft (working)"
echo ""
echo "Prochaines √©tapes (S1-02):"
echo "  docker compose up    # D√©marrer MkDocs local"
echo "  mkdocs build --strict    # Tester build"
echo ""
echo "Preview URL (apr√®s S2-03):"
echo "  https://${GITHUB_OWNER}.github.io/span-sg/"
echo "=========================================="
