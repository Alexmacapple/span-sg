name: Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # ===== SETUP =====
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # ===== DEPENDENCIES =====
      - name: Install dependencies
        run: pip install -r requirements-dsfr.txt

      - name: Install dev dependencies
        run: pip install -r requirements-dev.txt

      - name: Install security tools
        run: pip install -r requirements-security.txt

      # ===== QUALITY CHECKS =====
      - name: Run Black formatter check
        run: python -m black --check scripts/

      - name: Run Ruff linter
        run: python -m ruff check scripts/

      # ===== SECURITY CHECKS =====
      - name: Run Bandit security linter
        run: |
          echo "=== Bandit Security Analysis ==="
          echo "Analyzing scripts/ and hooks/ for security issues..."
          echo "(Excluding test files to avoid false positives)"
          echo ""

          # Generate JSON report (non-blocking)
          bandit -r scripts/ hooks/ -ll -x scripts/test_*.py,tests/ -f json -o bandit-report.json || true

          # Display summary and fail on HIGH/CRITICAL
          bandit -r scripts/ hooks/ -ll -x scripts/test_*.py,tests/ --format screen

          echo ""
          echo "=== Bandit analysis complete ==="

      - name: Check dependencies vulnerabilities (Safety)
        run: |
          echo "=== Safety CVE Check ==="
          echo "Checking requirements-dsfr.txt for known vulnerabilities..."
          echo ""

          # Generate JSON report (non-blocking)
          safety check -r requirements-dsfr.txt --json > safety-report.json || true

          # Fail if vulnerabilities found
          safety check -r requirements-dsfr.txt

          echo ""
          echo "=== No vulnerabilities found ==="

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 90

      # ===== TESTS =====
      - name: Run unit tests
        run: python -m pytest scripts/ -v --cov=scripts --cov-report=term-missing

      - name: Run production scripts coverage check (89%+ required)
        run: |
          python -m pytest \
            --cov=scripts \
            --cov-report=term-missing \
            --cov-report=html \
            --cov-fail-under=89 \
            scripts/test_calculate_scores*.py scripts/test_enrich_pdf*.py

      - name: Run hooks coverage check (100% required)
        run: |
          python -m pytest \
            tests/test_hooks_*.py \
            --cov=hooks \
            --cov-config=.coveragerc-hooks \
            --cov-report=term-missing \
            --cov-report=html:htmlcov-hooks \
            --cov-fail-under=100

      # ===== BUILD =====
      - name: Calculate SPAN scores
        run: python scripts/calculate_scores.py

      - name: Build site HTML (strict mode)
        run: mkdocs build --config-file mkdocs-dsfr.yml --strict

      - name: Verify DSFR theme applied
        run: |
          if ! grep -q 'fr-header' site/index.html; then
            echo "❌ ERREUR: Thème DSFR non appliqué (fr-header manquant)"
            exit 1
          fi
          echo "✅ Thème DSFR correctement appliqué"

      - name: Generate PDF
        run: |
          ENABLE_PDF_EXPORT=1 mkdocs build --config-file mkdocs-dsfr-pdf.yml

      - name: Enrich PDF metadata
        run: python scripts/enrich_pdf_metadata.py exports/span-sg.pdf

      - name: Install qpdf
        run: sudo apt-get update && sudo apt-get install -y qpdf

      - name: Validate PDF structure
        run: qpdf --check exports/span-sg.pdf

      # ===== E2E TESTS (only on push, skip PR) =====
      - name: Install system dependencies for E2E
        if: github.event_name == 'push'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libgdk-pixbuf2.0-0 \
            libffi-dev \
            shared-mime-info

      - name: Setup Docker Buildx
        if: github.event_name == 'push'
        uses: docker/setup-buildx-action@v2

      - name: Build test Docker image
        if: github.event_name == 'push'
        run: |
          docker buildx build \
            -f Dockerfile.mkdocs-test \
            -t mkdocs-test:latest \
            --load \
            .

      - name: Run E2E accessibility tests
        if: github.event_name == 'push'
        continue-on-error: true
        run: |
          docker run --rm mkdocs-test:latest bash tests/e2e/ci_runner.sh

      - name: Upload E2E report
        if: always() && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: e2e-report-${{ github.run_number }}
          path: tests/e2e/report.html
          retention-days: 30

      - name: Upload accessibility report
        if: always() && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-report-${{ github.run_number }}
          path: tests/e2e/accessibility_report.json
          retention-days: 30

      # ===== UPLOAD ARTIFACTS =====
      - name: Upload site HTML
        uses: actions/upload-artifact@v4
        with:
          name: site-${{ github.sha }}
          path: site/
          retention-days: 7

      - name: Upload exports PDF
        uses: actions/upload-artifact@v4
        with:
          name: exports-${{ github.sha }}
          path: exports/
          retention-days: 90

  deploy-staging:
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://alexmacapple.github.io/span-sg/draft/
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download site artifact
        uses: actions/download-artifact@v4
        with:
          name: site-${{ github.sha }}
          path: site/

      - name: Download exports artifact
        uses: actions/download-artifact@v4
        with:
          name: exports-${{ github.sha }}
          path: exports/

      - name: Deploy to /draft/ (staging)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Clean existing /draft/ directory
          rm -rf draft
          mkdir -p draft

          # Copy new build
          cp -r site/* draft/
          mkdir -p draft/exports
          cp -r exports/* draft/exports/

          # Commit and push
          git add draft
          git commit -m "Deploy staging from ${{ github.sha }}" || exit 0
          git push origin gh-pages

      - name: Deployment summary
        run: |
          echo "✅ Staging deployment complete"
          echo "URL: https://alexmacapple.github.io/span-sg/draft/"
          echo "Commit: ${{ github.sha }}"

  deploy-production:
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://alexmacapple.github.io/span-sg/
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download site artifact
        uses: actions/download-artifact@v4
        with:
          name: site-${{ github.sha }}
          path: site/

      - name: Download exports artifact
        uses: actions/download-artifact@v4
        with:
          name: exports-${{ github.sha }}
          path: exports/

      - name: Deploy to / (production)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Clean root (preserve /draft/ and .git)
          find . -mindepth 1 -maxdepth 1 ! -name 'draft' ! -name '.git' -exec rm -rf {} +

          # Copy new build
          cp -r site/* .
          mkdir -p exports
          cp -r exports/* exports/

          # Commit and push
          git add .
          git commit -m "Deploy production from ${{ github.sha }}" || exit 0
          git push origin gh-pages

      - name: Deployment summary
        run: |
          echo "✅ Production deployment complete"
          echo "URL: https://alexmacapple.github.io/span-sg/"
          echo "Commit: ${{ github.sha }}"
